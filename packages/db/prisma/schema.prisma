// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Post2 {
    id        Int      @id @default(autoincrement())
    content   String
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id                   String                @id @default(uuid())
    idpId                String
    places               Place[]
    blockScheduleConfigs BlockScheduleConfig[]
    geometryCriteria     GeometryCriterium[]
    ExternalBlocks       ExternalBlock[]

    @@unique([idpId])
}

model ExternalBlock {
    id                    String               @id @default(uuid())
    blockScheduleConfigId String?
    blockScheduleConfig   BlockScheduleConfig? @relation(fields: [blockScheduleConfigId], references: [id])
    user                  User                 @relation(fields: [userId], references: [id])
    userId                String
}

model BlockScheduleConfig {
    id                 String                 @id @default(uuid())
    externalBlocks     ExternalBlock[]
    geometryCriteria   GeometryCriterium[]
    fromTime           DateTime?
    toTime             DateTime?
    updateDelayType    UpdateDelayType?
    updateDelaySeconds Int?
    createdDate        DateTime               @default(now())
    updatedDate        DateTime               @updatedAt
    deleteStartedDate  DateTime?
    deletionStatus     ScheduleDeletedStatus?
    user               User                   @relation(fields: [userId], references: [id])
    userId             String
    dailyRecurrence    DailyRecurrence?
    weeklyRecurrence   WeeklyRecurrence?
    Actions            Actions[]
}

model Apps {
    id        String   @id @default(uuid())
    Actions   Actions? @relation(fields: [actionsId], references: [id])
    actionsId String?
}

model Actions {
    id                    String                @id @default(uuid())
    blockedApps           Apps[]
    blockScheduleConfig   BlockScheduleConfig   @relation(fields: [blockScheduleConfigId], references: [id])
    blockScheduleConfigId String
    date                  DateTime
    actionType            ActionType
    deletionDateThreshold DateTime
    deletionStatus        ActionDeletionStatus?
    executionStatus       ActionExecutionStatus
    password              String?
    fromDate              DateTime
    toDate                DateTime
    fromTime              DateTime
    toTime                DateTime
}

enum ActionDeletionStatus {
    DELETED
    FAILED
}

enum ActionExecutionStatus {
    WONT_START
    STARTED
    WONT_FINISH
    FINISHED
    FAILED
}

enum ActionType {
    START_BLOCK
    STOP_BLOCK
}

model WeeklyRecurrence {
    id                    String              @id @default(uuid())
    fromDay               DayOfWeek?
    toDay                 DayOfWeek?
    blockScheduleConfig   BlockScheduleConfig @relation(fields: [blockScheduleConfigId], references: [id])
    blockScheduleConfigId String              @unique
}

model DailyRecurrence {
    id                    String              @id @default(uuid())
    repeatDays            DayOfWeek[]
    blockScheduleConfigId String              @unique
    blockScheduleConfig   BlockScheduleConfig @relation(fields: [blockScheduleConfigId], references: [id])
}

enum UpdateDelayType {
    SCHEDULED
    TIMED_DELAY
}

enum ScheduleDeletedStatus {
    WAITING_FOR_CLIENT
    FAILED
    DELETED
}

enum DayOfWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

model GeometryCriterium {
    id                    String              @id @default(uuid())
    geometryBlockType     GeometryBlockType
    place                 Place               @relation(fields: [placeId], references: [id])
    placeId               String
    blockScheduleConfig   BlockScheduleConfig @relation(fields: [blockScheduleConfigId], references: [id])
    blockScheduleConfigId String
    user                  User                @relation(fields: [userId], references: [id])
    userId                String

    @@unique([userId, placeId, geometryBlockType])
}

model Place {
    id               String              @id @default(uuid())
    name             String
    userId           String
    user             User                @relation(fields: [userId], references: [id])
    geometryCriteria GeometryCriterium[]

    @@unique([userId, name])
}

enum GeometryBlockType {
    WHEN_INSIDE
    WHEN_OUTSIDE
    UNTIL_ENTERING
    UNTIL_LEAVING
}
