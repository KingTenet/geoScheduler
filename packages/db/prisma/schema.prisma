// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String              @id
    places             Place[]
    geoScheduleConfigs GeoScheduleConfig[]
    actionTemplate     ActionTemplate[]
}

model AppsToBlock {
    id   String @id @default(uuid())
    apps App[]

    actionsId String?

    geoScheduleConfig   GeoScheduleConfig @relation(fields: [geoScheduleConfigId], references: [id], onDelete: Cascade)
    geoScheduleConfigId String            @unique
}

model App {
    id            String      @id @default(uuid())
    appName       String
    appsToBlock   AppsToBlock @relation(fields: [appsToBlockId], references: [id], onDelete: Cascade)
    appsToBlockId String
}

model GeoScheduleConfig {
    id                 String                 @id @default(uuid())
    geometryCriteria   GeometryCriterium[]
    fromTime           Int
    toTime             Int
    paused             Boolean
    updateDelayType    UpdateDelayType?
    updateDelaySeconds Int?
    createdDate        DateTime               @default(now())
    updatedDate        DateTime               @updatedAt
    deleteStartedDate  DateTime?
    deletionStatus     ScheduleDeletedStatus?
    user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
    dailyRecurrence    DailyRecurrence?
    weeklyRecurrence   WeeklyRecurrence?
    actions            Actions[]
    appsToBlock        AppsToBlock?
}

model Actions {
    id                    String                 @id @default(uuid())
    geoScheduleConfig     GeoScheduleConfig      @relation(fields: [geoScheduleConfigId], references: [id], onDelete: Cascade)
    geoScheduleConfigId   String
    deletionDateThreshold DateTime
    executionStatus       ActionExecutionStatus?
    fromDate              DateTime
    toDate                DateTime

    @@unique([geoScheduleConfigId, fromDate])
}

model ConfigurationOptions {
    id               String          @id @default(uuid())
    option           String
    actionTemplate   ActionTemplate? @relation(fields: [actionTemplateId], references: [id], onDelete: Cascade)
    actionTemplateId String?
}

model ActionTemplate {
    id     String                 @id @default(uuid())
    name   String
    user   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    config ConfigurationOptions[]

    @@unique([userId, name])
}

enum ActionExecutionStatus {
    WONT_START
    STARTED
    WONT_FINISH
    FINISHED
    FAILED
}

model WeeklyRecurrence {
    id                  String            @id @default(uuid())
    fromDay             DayOfWeek
    toDay               DayOfWeek
    geoScheduleConfig   GeoScheduleConfig @relation(fields: [geoScheduleConfigId], references: [id], onDelete: Cascade)
    geoScheduleConfigId String            @unique
}

model DailyRecurrence {
    id                  String            @id @default(uuid())
    repeatDays          DayOfWeek[]
    geoScheduleConfigId String            @unique
    geoScheduleConfig   GeoScheduleConfig @relation(fields: [geoScheduleConfigId], references: [id], onDelete: Cascade)
}

enum UpdateDelayType {
    SCHEDULED
    TIMED_DELAY
}

enum ScheduleDeletedStatus {
    WAITING_FOR_CLIENT
    FAILED
    DELETED
}

enum DayOfWeek {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

model GeometryCriterium {
    id                  String            @id @default(uuid())
    geometryBlockType   GeometryBlockType
    place               Place             @relation(fields: [placeId], references: [id], onDelete: Cascade)
    placeId             String
    geoScheduleConfig   GeoScheduleConfig @relation(fields: [geoScheduleConfigId], references: [id], onDelete: Cascade)
    geoScheduleConfigId String
}

model Place {
    id               String              @id @default(uuid())
    name             String
    user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String
    latitude         Float
    longitude        Float
    radius           Float
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt
    geometryCriteria GeometryCriterium[]

    @@unique([userId, name])
}

enum GeometryBlockType {
    WHEN_INSIDE
    WHEN_OUTSIDE
    UNTIL_ENTERING
    UNTIL_LEAVING
}
